<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Suno Overlay with Kie.ai (Debug Mode)</title>
  <style>
    body {
      background: #000;
      color: #fff;
      font-family: sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }
    #container {
      display: flex;
      flex-direction: row;
      gap: 20px;
    }
    #lyricsPanel {
      width: 300px;
      display: flex;
      flex-direction: column;
      justify-content: center;
    }
    .lyric-line {
      font-size: 18px;
      text-align: left;
      opacity: 0.4;
      transition: opacity 0.3s ease;
    }
    .lyric-line.active {
      font-size: 20px;
      font-weight: bold;
      opacity: 1;
    }
    .lyric-line.light {
      opacity: 0.7;
    }
    .lyric-line.faded {
      opacity: 0.2;
    }
    #rightColumn {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    #songImage, #artistImage {
      width: 200px;
      height: 200px;
      object-fit: cover;
      margin-bottom: 10px;
    }
    #debug {
      position: absolute;
      bottom: 0;
      left: 0;
      padding: 10px;
      font-size: 12px;
      background: #111;
      color: #0f0;
      width: 100%;
      max-height: 200px;
      overflow-y: auto;
    }
  </style>
</head>
<body>
  <div id="container">
    <div id="lyricsPanel">
      <div class="lyric-line faded" id="lyric0">...</div>
      <div class="lyric-line light" id="lyric1">...</div>
      <div class="lyric-line active" id="lyric2">Loading lyrics...</div>
      <div class="lyric-line light" id="lyric3">...</div>
      <div class="lyric-line faded" id="lyric4">...</div>
    </div>
    <div id="rightColumn">
      <h1 id="songTitle">Loading...</h1>
      <h2 id="artistName">Loading...</h2>
      <img id="songImage" src="" alt="Song image" />
      <img id="artistImage" src="" alt="Artist image" />
      <audio id="audioPlayer" preload="auto" controls></audio>
      <button id="playPauseBtn">▶️</button>
    </div>
  </div>

  <div id="debug"></div>

  <script>
    const audio = document.getElementById("audioPlayer");
    const playPauseBtn = document.getElementById("playPauseBtn");
    const debug = document.getElementById("debug");
    const SHEET_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQmP_7WilIlpgM4jzZdhB6cHrOqqjkE3V-WrBKR0LuiUlRfMxNUErTd-IN5x1R1R0waUD8KvRztmu8c/pub?output=csv";
    const API_KEY = "6b371214fec2a2d9f16fc26dba2b99c9";
    let syncedLyrics = [], currentLineIndex = 0;

    function log(msg) {
      console.log(msg);
      debug.innerText += msg + "\n";
    }

    function extractAudioId(url) {
      const m = url.match(/suno\.com\/song\/([a-zA-Z0-9-]+)/);
      return m ? m[1] : "";
    }

    function updateLyricPanel() {
      for (let i = -2; i <= 2; i++) {
        const line = syncedLyrics[currentLineIndex + i]?.text || "";
        const el = document.getElementById(`lyric${i+2}`);
        el.textContent = line;
        el.className = "lyric-line " + (i===0? "active": Math.abs(i)===1? "light": "faded");
      }
    }

    async function fetchLatestFromCSV() {
      const res = await fetch(SHEET_CSV_URL);
      const txt = await res.text();
      const rows = txt.trim().split("\n").map(r=>r.split(","));
      const hdr = rows[0], last = rows[rows.length-1];
      const map = hdr.reduce((acc,k,i)=> (acc[k.trim()]=decodeURIComponent((last[i]||"").trim()), acc), {});
      if (!map["Suno Link"] || !map["Dropbox Link"]) {
        alert("Sheet missing Suno Link or Dropbox Link");
        throw Error("Missing links");
      }
      return { suno: map["Suno Link"], drop: map["Dropbox Link"] };
    }

    async function fetchKieData(taskId, audioId) {
      const resp = await fetch("https://kieai.erweima.ai/api/v1/generate/get-timestamped-lyrics", {
        method: "POST",
        headers: {"Authorization": `Bearer ${API_KEY}`, "Content-Type":"application/json"},
        body: JSON.stringify({ taskId, audioId })
      });
      return resp.ok ? await resp.json() : null;
    }

    async function init() {
      try {
        const { suno, drop } = await fetchLatestFromCSV();
        log("Suno Link: " + suno);
        log("Dropbox Link: " + drop);

        const audioId = extractAudioId(suno);
        log("Extracted audioId: " + audioId);

        if (!audioId) throw Error("Invalid Suno link format.");

        const meta = await fetchKieData(audioId, audioId);
        log("Kie.ai API response: " + JSON.stringify(meta));

        if (!meta?.data) {
          throw Error("Kie.ai returned no metadata.");
        }

        const song = meta.data;
        document.getElementById("songTitle").textContent = song.title || "Untitled";
        document.getElementById("artistName").textContent = song.artist || "Unknown";
        document.getElementById("songImage").src = song.coverImage || "";
        document.getElementById("artistImage").src = song.artistImage || song.coverImage;

        syncedLyrics = (song.timestampedLyrics||"").split("\n").map(l=>{
          const m = l.match(/\[(\d{2}):(\d{2}\.\d+)\](.*)/);
          return m && { time: +m[1]*60 + +m[2], text: m[3].trim() };
        }).filter(Boolean);

        audio.src = drop.replace("?dl=0","?raw=1");
        audio.play();
      } catch (e) {
        log("Init error: " + e.message);
        document.getElementById("lyric2").textContent = "Lyrics unavailable";
        document.getElementById("songTitle").textContent = "—";
        document.getElementById("artistName").textContent = "—";
      }
    }

    audio.addEventListener("timeupdate", ()=>{
      const t = audio.currentTime;
      for (let i=0; i<syncedLyrics.length; i++){
        if (t>=syncedLyrics[i].time && (i===syncedLyrics.length-1 || t<syncedLyrics[i+1].time)) {
          if (i!==currentLineIndex) { currentLineIndex=i; updateLyricPanel(); }
          break;
        }
      }
    });

    playPauseBtn.addEventListener("click", ()=>{
      audio.paused ? audio.play() : audio.pause();
    });
    audio.addEventListener("play", ()=>playPauseBtn.textContent="⏸️");
    audio.addEventListener("pause", ()=>playPauseBtn.textContent="▶️");

    init();
  </script>
</body>
</html>
